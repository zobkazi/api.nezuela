// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  title       String
  slug        String    @unique // SEO-friendly URLs
  content     String?   // Optional content
  excerpt     String?   // Short summary
  coverImage  String?   // Optional cover image
  
  // Relations
  author      User      @relation(fields: [authorId], references: [id])
  authorId    Int
  
  // Many-to-many relations
  categories  PostCategory[]
  tags        PostTag[]

  // Comments
  comments    Comment[]
}

model User {
  id       Int      @id @default(autoincrement())
  name     String
  email    String   @unique
  password String   // Store securely (hashed)
  role     Role     @default(USER) // Role field (ADMIN, USER)
  
  // Relations
  posts    Post[]
  comments Comment[]
}

enum Role {
  USER
  ADMIN
}

// Many-to-Many Relationship between Posts and Categories
model PostCategory {
  postId     Int
  categoryId Int
  post       Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([postId, categoryId]) // Composite primary key
}

// Many-to-Many Relationship between Posts and Tags
model PostTag {
  postId  Int
  tagId   Int
  post    Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag     Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId]) // Composite primary key
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  slug  String @unique // SEO-friendly URLs
  
  // Relations
  posts PostCategory[]
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  slug  String @unique // SEO-friendly URLs

  // Relations
  posts PostTag[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  content   String

  // Relations
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}
