generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  firstName     String
  lastName      String
  email         String    @unique
  password      String
  profileImages String?
  bio           String?
  link          String?
  role          Role      @default(USER)
  comments      Comment[]
  posts         Post[]
  Order         Order[]
}

model Post {
  id         Int            @id @default(autoincrement())
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  title      String
  slug       String         @unique
  content    String?
  excerpt    String?
  authorId   Int
  coverImage String?
  comments   Comment[]
  author     User           @relation(fields: [authorId], references: [id])
  categories PostCategory[]
  tags       PostTag[]
}

model Product {
  id                 Int      @id @default(autoincrement())
  name               String @unique
  description        String
  price              Decimal  @db.Decimal(10, 2)
  discountPercentage Float
  rating             Float
  stock              Int
  brand              String
  thumbnail          String
  images             String[]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  categories ProductCategory[] @relation("ProductToCategory")
  orders     OrderItem[]
}

model PostCategory {
  postId     Int
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([postId, categoryId])
}

model ProductCategory {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[] @relation("ProductToCategory")
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  totalAmount Decimal     @db.Decimal(10, 2)
  status      OrderStatus
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model PostTag {
  postId Int
  tagId  Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
}

model Category {
  id    Int            @id @default(autoincrement())
  name  String         @unique
  slug  String         @unique
  posts PostCategory[]
}

model Tag {
  id    Int       @id @default(autoincrement())
  name  String    @unique
  slug  String    @unique
  posts PostTag[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  content   String
  postId    Int
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}
