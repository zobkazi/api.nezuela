generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id         Int            @id @default(autoincrement())
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  title      String
  slug       String         @unique
  content    String?
  excerpt    String?
  authorId   Int
  coverImage String?
  comments   Comment[]
  author     User           @relation(fields: [authorId], references: [id])
  categories PostCategory[]
  tags       PostTag[]
}

model User {
  id       Int       @id @default(autoincrement())
  firstName     String
  lastName String
  email    String    @unique
  password String
  confirmPassword String
  role     Role      @default(USER)
  comments Comment[]
  posts    Post[]
}

model PostCategory {
  postId     Int
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([postId, categoryId])
}

model PostTag {
  postId Int
  tagId  Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
}

model Category {
  id    Int            @id @default(autoincrement())
  name  String         @unique
  slug  String         @unique
  posts PostCategory[]
}

model Tag {
  id    Int       @id @default(autoincrement())
  name  String    @unique
  slug  String    @unique
  posts PostTag[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  content   String
  postId    Int
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}



